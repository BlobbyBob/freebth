#!/usr/bin/env python3
import re
import urllib.request
from datetime import date, timedelta

from CustomParser import *
from TimeSlots import TimeSlots, Weekday
from util import *

if __name__ == '__main__':
    nextMonday = date.today()
    if nextMonday.weekday() != 0:
        nextMonday = nextMonday + timedelta(days=7 - nextMonday.weekday())

    # Fetch list of gyms
    gyms = list()
    listUrl = 'https://stadtplan.bonn.de/cms/cms.pl?Amt=Stadtplan&set=5_1_1_1&act=1&Drucken=1&umtausch=&geoid='

    for i in range(0, 210, 10):
        # Fetch
        req = urllib.request.urlopen(listUrl + str(i))
        contentType = req.info().get('Content-Type')
        resp = req.read().decode(contentType.split('=')[1])

        # Parse
        parser = GymListParser()
        parser.feed(resp)
        print(parser.infos)
        gyms.extend(parser.infos)
        break  # todo remove in productin

    scheduleUrl = 'https://stadtplan.bonn.de/cms/cms.pl?Amt=Stadtplan&set=5_1_3_0&act=1&Drucken=1&meta=neu&sid=&suchwert='

    schedules = list()
    for gym in gyms:
        schedule = dict()
        schedule['gymId'] = gym[0]
        schedule['gymName'] = gym[1]

        # Fetch
        req = urllib.request.urlopen(
            f"{scheduleUrl}{schedule['gymId']}FFF{nextMonday.day}.{nextMonday.month}.{nextMonday.year}")
        contentType = req.info().get('Content-Type')
        resp = req.read().decode(contentType.split('=')[1])

        # Parse
        parser = ScheduleParser()
        parser.feed(resp)

        # Convert to time slots
        sectioned, maxSection = parse_section_meta(parser.schedule)
        if sectioned:
            schedule['timeslots'] = list()
            for i in range(0, maxSection):
                schedule['timeslots'].append(TimeSlots())
        else:
            schedule['timeslots'] = TimeSlots()

        for details in parser.schedule:
            timeinfo = details[0]
            eventType = details[1]
            sectioninfo = details[2]

            if sectioned:
                sections = parse_sections(sectioninfo)
                for section in sections:
                    parse_into_timeslots(schedule['timeslots'][section - 1], timeinfo, eventType)
            else:
                parse_into_timeslots(schedule['timeslots'], timeinfo, eventType)

        schedule['sectioned'] = sectioned
        schedules.append(schedule)
        break

    for schedule in schedules:
        if schedule['sectioned']:
            for i, timeslots in enumerate(schedule['timeslots']):
                freeslots = timeslots.find_free((9, 0), (22, 0), 30)
                if len(freeslots) > 0:
                    print(f"{schedule['gymName']} (Hallenteil {i + 1})")
                    for slot in freeslots:
                        print("    " + slot)
        else:
            freeslots = schedule['timeslots'].find_free((9, 0), (22, 0), 30)
            if len(freeslots) > 0:
                print(schedule['gymName'])
                for slot in freeslots:
                    print("    " + slot)
