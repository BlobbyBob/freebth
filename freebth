#!/usr/bin/env python3
import os
import pickle
import urllib.request
from datetime import date, timedelta
from time import sleep

import gui
from CustomParser import *
from TimeSlots import *
from util import *

if __name__ == '__main__':
    nextMonday = date.today()
    if nextMonday.weekday() != 0:
        nextMonday = nextMonday + timedelta(days=7 - nextMonday.weekday())

    datafile = 'schedules.dat'

    schedules = list()
    if not os.path.isfile(datafile):
        # Fetch list of gyms
        gyms = list()
        listUrl = 'https://stadtplan.bonn.de/cms/cms.pl?Amt=Stadtplan&set=5_1_1_1&act=1&Drucken=1&umtausch=&geoid='

        print("Fetching gym list ... ")
        for i in range(0, 210, 10):
            # Fetch
            req = urllib.request.urlopen(listUrl + str(i))
            contentType = req.info().get('Content-Type')
            resp = req.read().decode(contentType.split('=')[1])

            # Parse
            parser = GymListParser()
            parser.feed(resp)
            gyms.extend(parser.infos)
            sleep(0.1)
            print(f"\r{100 * i / 200:.2f}%", end='')
        print()

        # Schedules
        scheduleUrl = 'https://stadtplan.bonn.de/cms/cms.pl?Amt=Stadtplan&set=5_1_3_0&act=1&Drucken=1&meta=neu&sid=&suchwert='

        print("Fetching schedules ...")
        for index, gym in enumerate(gyms):
            schedule = dict()
            schedule['gymId'] = gym[0]
            schedule['gymName'] = gym[1]

            # Fetch
            req = urllib.request.urlopen("%s%sFFF%s.%s.%s") % (scheduleUrl, schedule['gymId'], nextMonday.day, nextMonday.month, nextMonday.year)
            contentType = req.info().get('Content-Type')
            resp = req.read().decode(contentType.split('=')[1])

            # Parse
            parser = ScheduleParser()
            parser.feed(resp)

            # Convert to time slots
            sectioned, maxSection = parse_section_meta(parser.schedule)
            if sectioned:
                schedule['timeslots'] = list()
                for i in range(0, maxSection):
                    schedule['timeslots'].append(TimeSlots())
            else:
                schedule['timeslots'] = TimeSlots()

            for details in parser.schedule:
                timeinfo = details[0]
                eventType = details[1]
                sectioninfo = details[2]

                if sectioned:
                    sections = parse_sections(sectioninfo)
                    for section in sections:
                        parse_into_timeslots(schedule['timeslots'][section - 1], timeinfo, eventType)
                else:
                    parse_into_timeslots(schedule['timeslots'], timeinfo, eventType)

            schedule['sectioned'] = sectioned
            schedules.append(schedule)
            sleep(0.1)
            print(f"\r{100 * index / (len(gyms) - 1):.2f}%", end='')
        print()

        # Save result
        with open(datafile, 'wb') as f:
            pickle.dump(schedules, f, protocol=pickle.HIGHEST_PROTOCOL)
    else:
        # Restore from file
        with open(datafile, 'rb') as f:
            schedules = pickle.load(f)

    gui.schedules = schedules
    gui.start_webserver()
